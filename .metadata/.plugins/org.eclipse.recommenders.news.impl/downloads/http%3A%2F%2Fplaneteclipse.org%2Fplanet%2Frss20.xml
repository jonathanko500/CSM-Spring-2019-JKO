<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Eclipse Announcements: Jakartablogs.ee is Live! PS: Bloggers, We Need You!</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/3RT2ePABFqk/jakartablogsee-live-ps-bloggers-we-need-you</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/3RT2ePABFqk/jakartablogsee-live-ps-bloggers-we-need-you</link>
	<description>Jakartablogs.ee is the new blog home for our global community to stay up to date on the latest Jakarta EE news, technologies, best practices, and more.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/3RT2ePABFqk&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 29 Jan 2019 20:20:00 +0000</pubDate>
</item>
<item>
	<title>Thabang Mashologu: Jakartablogs.ee is Live! PS: Bloggers, We Need You!</title>
	<guid isPermaLink="false">https://blogs.eclipse.org/6666 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/thabang-mashologu/jakartablogsee-live-ps-bloggers-we-need-you</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;Just in time for the Eclipse 5.1 GA release January 29, 2019 , we are happy to announce that our new &lt;a href=&quot;https://jakartablogs.ee/&quot;&gt;Jakartablogs.ee&lt;/a&gt; blog aggregator is live!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jakartablogs.ee/&quot;&gt;Jakartablogs.ee&lt;/a&gt; is the new blog home for our global community to stay up to date on the latest Jakarta EE news, technologies, best practices, and more. We hope that &lt;a href=&quot;https://jakartablogs.ee/&quot;&gt;Jakartablogs.ee&lt;/a&gt; will be a place where the world will come to read relevant, timely, and thought-provoking content on open source enterprise Java innovation for the cloud.&lt;/p&gt;

&lt;p&gt;Are you a prolific blogger on topics related to cloud native Java, Jakarta EE, and open source? If so, WE NEED YOU!&lt;/p&gt;

&lt;p&gt;Adding a blog to the Jakartablogs feed is easy. After reviewing the &lt;a href=&quot;https://github.com/jakartaee/jakartablogs.ee#guidelines&quot;&gt;guidelines&lt;/a&gt;, you can simply open a &lt;a href=&quot;https://github.com/jakartaee/jakartablogs.ee/issues/new?template=add_blog.md&quot;&gt;GitHub issue&lt;/a&gt; or create a pull request with your feed-specific information.&lt;/p&gt;

&lt;p&gt;We look forward to sharing exciting Jakarta EE updates, news, and content from some of the industry’s leading minds that motivates, educates, and inspires the engagement of our community.&lt;/p&gt;

&lt;p&gt;Please visit &lt;a href=&quot;https://jakartablogs.ee/&quot;&gt;Jakartablogs.ee&lt;/a&gt;, subscribe to the site’s &lt;a href=&quot;https://jakartablogs.ee/rss20.xml&quot;&gt;aggregated feed&lt;/a&gt;, and add your blog today!&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/custom_uploads/Screen%20Shot%202019-01-29%20at%205.20.00%20AM.png&quot; style=&quot;height: 302px; width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-tags field-type-taxonomy-term-reference field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Tags: &lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/jakartaee&quot;&gt;#JakartaEE&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/jakartablogs&quot;&gt;JakartaBlogs&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/community&quot;&gt;Community&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 29 Jan 2019 10:24:39 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Leverage Information Chunking to scale your Java library package design</title>
	<guid isPermaLink="false">https://medium.com/p/fcedf64af434</guid>
	<link>https://medium.com/@donraab/leverage-information-chunking-to-scale-your-java-library-package-design-fcedf64af434?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Organizing and grouping your packages can help make your library easier to navigate, comprehend and grow over time.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*R-Y8a6lzMw0Aqs9kM6P6ag.jpeg&quot; /&gt;Grounds for Sculpture, Hamilton Township, NJ&lt;/figure&gt;&lt;h3&gt;Scaling Java library package design is hard&lt;/h3&gt;&lt;p&gt;Java gives us packages to organize related classes and interfaces. Packages are extremely useful, but can be hard to leverage effectively because every package requires a name. Naming things is hard. Organizing things effectively into a hierarchy can be a challenge. Renaming and moving things may be easy in your IDE, but can be extremely hard on your clients if they have to manually replay the rename and move refactorings in their code when they upgrade your library.&lt;/p&gt;&lt;p&gt;It may seem a trivial decision to put everything in the same package and jar when the number of classes in your library is less than ten or twenty. But what do you do if the number of classes and interfaces you have is much more than that? If you have a large number of interfaces and classes in your library, consider splitting your API and implementation classes into separate packages. Also, if you want to enable others to implement your API without having to include the default implementations, having a separate API jar is helpful.&lt;/p&gt;&lt;p&gt;I will explain the Information Chunking strategy that we leverage in Eclipse Collections. Our package hierarchy evolved significantly over time as the library grew. The package design decisions we made consciously before we open sourced Eclipse Collections have made it possible for us to continue to grow the library over an extended period of time.&lt;/p&gt;&lt;h3&gt;How Information Chunking works&lt;/h3&gt;&lt;p&gt;The human mind can remember seven plus or minus two things at a time. This is why phone numbers are seven digits long in the United States. Humans can more effectively manage a large set of information if related concepts are grouped together in chunks of seven plus or minus two things. Sometimes sticking strictly with this number isn’t possible without exploding the number of packages unnecessarily. For instance, organizing every primitive type container into its own package would probably be overkill. Alphabetic sorting of interface and class names gives us a visual grouping within a package so we can more quickly focus or ignore things based on their prefix.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; Don’t make me scroll. If you make me scroll to see all of the classes in a package, then it is too many.&lt;/p&gt;&lt;h3&gt;The Eclipse Collections Package Strategy&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Separate Interfaces from Implementation&lt;/li&gt;&lt;li&gt;Organize top-level packages by container type&lt;/li&gt;&lt;li&gt;Organize container type specializations with container types (e.g. sorted)&lt;/li&gt;&lt;li&gt;Organize impl packages by Interface type (e.g. Mutable, Immutable)&lt;/li&gt;&lt;li&gt;Organize primitive types into a separate package&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*x7tvAh5_CcaS0TZ1O62sRQ.png&quot; /&gt;High-level concerns in Eclipse Collections&lt;/figure&gt;&lt;h3&gt;Separate Interfaces from Implementation&lt;/h3&gt;&lt;p&gt;Eclipse Collections has separate packages and jar files for API interfaces and implementation classes. This allows for clients of our library to understand both the API and implementation separately and group both into a similar mental model by container type.&lt;/p&gt;&lt;h4&gt;Eclipse Collections org.eclipse.collections.api/impl packages&lt;/h4&gt;&lt;p&gt;Eclipse Collections has separate modules and package names for api and implementation. The api packages are on the left, and the impl packages are on the right.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/910/1*k9AWYqVmeltDWz8kUZXt0g.jpeg&quot; /&gt;Eclipse Collections API and Implementation Package Structures&lt;/figure&gt;&lt;p&gt;Eclipse Collections is a large library, but has a manageable number of high level concepts grouped into packages. We have organized Eclipse Collections so that it is easy to explore the supported container types and dive into additional detail as necessary.&lt;/p&gt;&lt;p&gt;Having the API interfaces separated from implementation classes has resulted in extra benefits for the library. The implementation classes depend on the API interfaces, but not the other way around. When API interfaces and implementation classes are in the same packages and located in the same jar, it becomes possible to introduce unwanted dependencies between interfaces and their implementation that are hard to remove later.&lt;/p&gt;&lt;h4&gt;JDK java.util package&lt;/h4&gt;&lt;p&gt;The interfaces and classes contained in the JDK &lt;strong&gt;java.util&lt;/strong&gt; package are shown below.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/982/1*K2Lxki2nCRj2kqD2k5ZrNA.jpeg&quot; /&gt;JDK java.util package&lt;/figure&gt;&lt;p&gt;This is a lot of classes and interfaces for a single package. You can differentiate interfaces and classes by their icons, but there is no way to understand the relationship between any of these utility classes. There are collections, exceptions, formatters, comparators, statistics, optionals, calendars, date, service loader, string related stuff, time zones, timer classes, and other utilities all in the same package. This is a bag of interfaces and classes sorted alphabetically by name.&lt;/p&gt;&lt;p&gt;The &lt;strong&gt;java.util&lt;/strong&gt; package has become a parking lot for things loosely classified as “utility”. Ideally, there should be a &lt;strong&gt;java.util.collection&lt;/strong&gt; package which contains only classes and interfaces that deal with collections. Because of the backwards compatibility guarantee of Java, the only reasonable way forward is to introduce new concepts in new packages like &lt;strong&gt;java.util.stream&lt;/strong&gt;.&lt;/p&gt;&lt;h4&gt;Google Guava com.google.collect package&lt;/h4&gt;&lt;p&gt;These are the classes and interfaces in Google Guava’s &lt;strong&gt;com.google.collect&lt;/strong&gt; package.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*7_1jsHkSUWpix_bChGbgig.jpeg&quot; /&gt;Guava package com.google.collect&lt;/figure&gt;&lt;p&gt;There are a lot of classes in this package, but they are all related to collections. There is a visual grouping that happens due to the prefix of some classes (e.g. Filtered, Forwarding, Immutable, Regular) but it is hard to focus on the interfaces vs. the implementations to understand the overall focus and scope of the library.&lt;/p&gt;&lt;h4&gt;Apache org.apache.commons.collections4 package&lt;/h4&gt;&lt;p&gt;The last library I will compare with here is Apache Commons Collections, which is the oldest third-party Java collections library.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/610/1*HshXa-MHHoBbs9FYk0faug.jpeg&quot; /&gt;Apache package org.apache.commons.collections4&lt;/figure&gt;&lt;p&gt;Apache Commons Collections organizes its implementations by container type, but does not split its API interfaces and implementations into separate packages.&lt;/p&gt;&lt;p&gt;Eclipse Collections is the only Java collections library out of the four that has split its API and Implementations into separate packages and separate jar files.&lt;/p&gt;&lt;h3&gt;Organize packages by container type&lt;/h3&gt;&lt;p&gt;When we decided to add immutable container types and implementations to Eclipse Collections, we knew we needed to reorganize the library. We knew it would not work well if we had over a hundred classes and interfaces in a single package. We also decided it would be good to separate our API interfaces into a separate package structure. We then chose “container type” as the high level package grouping.&lt;/p&gt;&lt;p&gt;This is the set of high level containers we had to figure out how to organize in our API and implementation packages.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/777/1*Gs6oL36CsN69d4aJPmBsag.png&quot; /&gt;Eclipse Collections container types&lt;/figure&gt;&lt;p&gt;Each container type then had a set of additional concerns that needed to be addressed in the package hierarchy.&lt;/p&gt;&lt;p&gt;This is what it looks like when you expand the &lt;em&gt;List&lt;/em&gt; container type package in both the interface and implementation packages.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*UtDtuNGSw-bHJYncopKuoA.jpeg&quot; /&gt;Interfaces in API package drive the package hierarchy in implementation package&lt;/figure&gt;&lt;h3&gt;Organize container type specializations with container types&lt;/h3&gt;&lt;p&gt;Eclipse Collections has &lt;strong&gt;sorted&lt;/strong&gt; versions of &lt;em&gt;Bag&lt;/em&gt;, &lt;em&gt;Set&lt;/em&gt;, and &lt;em&gt;Map&lt;/em&gt;. Each of these container types have a sub-package named &lt;strong&gt;sorted&lt;/strong&gt;. This strategy can be used with other container type specializations as needed.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*PBBpKrFK8lOepW1mdLyMOg.jpeg&quot; /&gt;Bag, Set and Map all have sorted versions&lt;/figure&gt;&lt;h3&gt;Organize impl packages by Interface types&lt;/h3&gt;&lt;p&gt;There are three &lt;em&gt;primary&lt;/em&gt; interface types for all container types in Eclipse Collections. They are &lt;strong&gt;Mutable&lt;/strong&gt;, &lt;strong&gt;Immutable&lt;/strong&gt; and &lt;strong&gt;Iterable&lt;/strong&gt; (a.k.a. Readable).&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*e-ojSJgIpoWCKOE7noQkfQ.png&quot; /&gt;Symmetry across container types — Iterable, Mutable, Immutable&lt;/figure&gt;&lt;p&gt;For the &lt;em&gt;List&lt;/em&gt; container type, there are implementation classes for the interface types of &lt;strong&gt;Mutable, Immutable&lt;/strong&gt; and &lt;strong&gt;FixedSize&lt;/strong&gt;. FixedSize is currently limited to &lt;em&gt;List&lt;/em&gt;, &lt;em&gt;Set&lt;/em&gt; and &lt;em&gt;Map&lt;/em&gt; container types, and is for achieving memory efficiency for Mutable container types that are are like arrays. That is they can be modified, but they cannot be grown.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/448/1*iR1iGVCubv1NNKyangmKMA.jpeg&quot; /&gt;Object List implementations organized by FixedSize, Immutable and Mutable&lt;/figure&gt;&lt;h3&gt;Organize primitive types into a separate package&lt;/h3&gt;&lt;p&gt;Primitive containers are organized below the container type packages in the API jar and below the Mutable and Immutable packages in the implementation jar.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/751/1*JX5H5yQR7zPSue7kwr4VuA.jpeg&quot; /&gt;API packages (left) and Impl packages(right) for List container type and Mutable Implementations only&lt;/figure&gt;&lt;p&gt;We could have split the primitive collections into separate packages by primitive type. This would have resulted in eight packages for each of the primitive packages. We decided not to do this because the alphabetic sorting of class names with their prefixes provided enough of a visual grouping in the primitive packages.&lt;/p&gt;&lt;h3&gt;Enough is enough&lt;/h3&gt;&lt;p&gt;You need to eventually make a decision when you have enough packages in your hierarchy, and it may not work perfectly with the magical number seven in mind.&lt;/p&gt;&lt;p&gt;The mutable collection implementations have a few extra concerns to deal with — Synchronized, Unmodifiable and MultiReader. We felt these concepts did not warrant their own packages. There is no good name we could come up with to group them together in a package. A name like “mutable.other” would not be terribly useful. So we stopped at &lt;strong&gt;list.mutable&lt;/strong&gt; and &lt;strong&gt;list.mutable.primitive&lt;/strong&gt; on the implementation packages.&lt;/p&gt;&lt;h3&gt;When is it time to restructure the packages?&lt;/h3&gt;&lt;p&gt;We reorganized the packages in Eclipse Collections when we added Immutable Collections to the library (#10), right before we open sourced the library as GS Collections. Immutable Collections significantly increased the number of concepts we had to manage in our packages.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*IdXxdLptmbKRfhWpQ5Mxmw.jpeg&quot; /&gt;Package restructuring happened around item #10&lt;/figure&gt;&lt;p&gt;The next point where we introduced something large to the ecosystem that had to fit into our package hierarchy was with primitive collections (#13). We were able to accomplish this without a complete restructuring by inserting &lt;strong&gt;primitive&lt;/strong&gt; packages into the existing hierarchy below their object counterparts.&lt;/p&gt;&lt;p&gt;The parent packages changed again from &lt;strong&gt;com.gs.collections&lt;/strong&gt; to &lt;strong&gt;org.eclipse.collections&lt;/strong&gt; when the library was migrated to the Eclipse Foundation and became Eclipse Collections. We open sourced a separate library to help users of GS Collections convert to Eclipse Collections — &lt;a href=&quot;https://github.com/eclipse/gsc-ec-converter&quot;&gt;https://github.com/eclipse/gsc-ec-converter&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Final Thoughts&lt;/h3&gt;&lt;p&gt;Java packages are a solution to help with the problem of name spacing and logical grouping. When you’re evolving and growing a library, you should be prepared to optimize your package structure to allow for better logical grouping and information chunking.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=fcedf64af434&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 28 Jan 2019 18:35:17 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Specification Process IV: The Specification Committee Votes</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/om--jv9Up6M/eclipse-specification-process-iv-specification-committee-votes</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/om--jv9Up6M/eclipse-specification-process-iv-specification-committee-votes</link>
	<description>One key difference between Eclipse open source software projects and open source specification projects is that specification projects must be aligned with exactly one specification committee&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/om--jv9Up6M&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 21 Jan 2019 19:00:00 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: EFSP: The Specification Committee Votes</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5482</guid>
	<link>https://waynebeaton.wordpress.com/2019/01/21/eclipse-specification-process-iv-the-specification-committee-votes/</link>
	<description>&lt;p&gt;One key difference between Eclipse open source &lt;em&gt;software&lt;/em&gt; projects as defined by the &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/&quot;&gt;Eclipse Development Process&lt;/a&gt; (EDP), and open source &lt;em&gt;specification&lt;/em&gt; projects as defined by the &lt;a href=&quot;https://www.eclipse.org/projects/efsp/&quot;&gt;Eclipse Foundation Specification Process&lt;/a&gt; (EFSP) is that specification projects must be aligned with exactly one &lt;em&gt;specification committee&lt;/em&gt;. More generally, specification projects are aligned with an Eclipse &lt;em&gt;&lt;a href=&quot;https://www.eclipse.org/org/workinggroups/&quot;&gt;working group&lt;/a&gt;&lt;/em&gt; and are governed (in part) by the working group’s specification committee.&lt;/p&gt;
&lt;p&gt;The specification committee is required to vote to approve key milestones in the lifecycle of their specification projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Specification project creation;&lt;/li&gt;
&lt;li&gt;Release plan;&lt;/li&gt;
&lt;li&gt;Revision to the scope;&lt;/li&gt;
&lt;li&gt;Progress and release reviews;&lt;/li&gt;
&lt;li&gt;Service releases; and&lt;/li&gt;
&lt;li&gt;Designation of a profile or platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most frequent votes occur when specification projects engage in the reviews that occur during the development cycle (highlighted in bold).&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;efsp&quot; class=&quot;alignnone size-full wp-image-5483 aligncenter&quot; src=&quot;https://waynebeaton.files.wordpress.com/2019/01/efsp.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;To succeed, a vote requires positive responses from a super-majority (defined as two-thirds) of the members of the specification committee. Votes to designate a specification as a &lt;em&gt;profile&lt;/em&gt; or &lt;em&gt;platform&lt;/em&gt; require positive responses from a super-majority of the specification committee members who represent the interests of &lt;a href=&quot;https://www.eclipse.org/membership/&quot;&gt;Strategic Members&lt;/a&gt; of the Eclipse Foundation. It’s worth noting that there is no veto.&lt;/p&gt;
&lt;p&gt;The criteria by which representatives decide how they’re going to vote varies by individual and according to the values of the individual and the organization that they represent (if applicable). Minimally, the specification committee is expected to use their vote to ensure that specification projects stay within scope. In the case of a progress review, the voters will need to consider whether or not the project is progressing in a manner that will eventually result in a successful vote on the eventual release review that gates the ratification of the final specification.&lt;/p&gt;
&lt;p&gt;The EFSP is silent on what happens in the event of a failed vote. In the event of a failure, we expect that feedback regarding the reason for the failure will be provided to the project team, who will work to mitigate issues and then re-engage.&lt;/p&gt;
&lt;p&gt;Please see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://waynebeaton.wordpress.com/2018/11/07/eclipse-foundation-specification-process-part-i-the-edp/&quot;&gt;The EDP&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://waynebeaton.wordpress.com/2018/11/26/eclipse-foundation-specification-process-part-ii-the-efsp/&quot;&gt;The EFSP&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://waynebeaton.wordpress.com/2018/11/28/eclipse-foundation-specification-process-part-iii-creation/&quot;&gt;Creating a Specification Project;&lt;/a&gt; and&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://waynebeaton.wordpress.com/2019/01/21/eclipse-specification-process-iv-the-specification-committee-votes/&quot;&gt;Specification Committee Votes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
	<pubDate>Mon, 21 Jan 2019 17:40:50 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: We are hiring</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/we-are-hiring - again.html</guid>
	<link>https://tools.jboss.org/blog/we-are-hiring - again.html</link>
	<description>&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Developer Experience and Tooling group, of which JBoss Tools team is part,
      is looking for an awesome developer. We are looking to continue
      improving the usability for developers around various IDEs including Eclipse, VSCode and IntelliJ and around the Red Hat product line, including JBoss Middleware.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Topics range from Java to JavaScript, application servers to containers, source code tinkering to full blown CI/CD setups.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you are into making developers life easier and like to be able to get involved in many different technologies and get them to work great together then do apply.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can also ping me (&lt;a href=&quot;mailto:jeffmaury@redhat.com&quot;&gt;jeffmaury@redhat.com&lt;/a&gt;) for questions.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The current list of openings are:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://global-redhat.icims.com/jobs/66514/software-engineer---jboss-and-openshift-tooling/job&quot;&gt;Sofware engineer&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Note: the job postings do list a specific location, but for the right candidate we are happy to consider many locations worldwide (anywhere there is a Red Hat office), as well as working from home.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Have fun!&lt;br /&gt;
      Jeff Maury&lt;br /&gt;
      &lt;a href=&quot;http://twitter.com/jeffmaury&quot;&gt;@jeffmaury&lt;/a&gt;
      &lt;a href=&quot;http://twitter.com/jbosstools&quot;&gt;@jbosstools&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 17 Jan 2019 13:31:32 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Papyrus UML Light users</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=1152</guid>
	<link>https://papyrusuml.wordpress.com/2019/01/16/papyrus-uml-light-users/</link>
	<description>&lt;p&gt;In my previous post, I did mention that we had some users in mind that would benefit from using Papyrus UML Light.&lt;/p&gt;



&lt;p&gt;I should have given you a hint as to who they are…&lt;/p&gt;



&lt;h3&gt;&lt;strong&gt;Nicole – a Papyrus Novice&lt;/strong&gt;&lt;/h3&gt;



&lt;p&gt;Nicole is already knowledgeable in UML at or above the OMG’s &lt;a href=&quot;https://www.omg.org/ocup-2/coveragemap-found.htm&quot;&gt;OCUP2 Foundation&lt;/a&gt; or intermediate level contents.&lt;/p&gt;



&lt;p&gt;As the project on which ze worked was completed, ze is being moved to a new team that uses Papyrus, a tool with which ze is not familiar.&lt;/p&gt;



&lt;p&gt;Nicole’s goal in using
Papyrus UML Light is to quickly get familiar
with Papyrus UML Light and how it supports UML-based modeling.
Ze
appreciates and benefits from
Papyrus UML Light’s streamlined editor with the most common concepts of UML, so
that
ze
can focus on getting to know the Papyrus UML Light
user interface and way of working without
being exposed
to the full
spectrum of UML model elements.&lt;/p&gt;



&lt;h3&gt;&lt;strong&gt;Steve – a UML Novice and Student&lt;/strong&gt;&lt;/h3&gt;



&lt;p&gt;Steve is new to the modeling world and has no familiarity with the UML.&lt;/p&gt;



&lt;p&gt;Ze is starting to learn about UML and faces the dual tasks of learning to use UML at the same time as learning to use a UML modeling tool.&lt;/p&gt;



&lt;p&gt;Using Papyrus
UML Light, Steve will be exposed to fewer language and
tool concepts
at
a
time, wich
results in a lowering of the learning curve. &lt;/p&gt;



&lt;p&gt;In addition, the alignment of Papyrus UML Light to OCUP2 (Foundational) is beneficial, as it ensures that ze first deals with the most most important concepts of UML before tackling the more complex aspects.&lt;/p&gt;



&lt;h3&gt;Brisha – a Basic UML User&lt;/h3&gt;



&lt;p&gt;Brisha only uses UML from time to time and then only for basic purposes such as documentation, presentations, discussions, etc. Ze is not interested in a full model-based engineering tool or method and rather uses it to “sketch” using UML to ensure common understanding of the graphics. As such, ze only needs the basic concepts of UML. In this context, an easy to use UML modeling tool such as Papyrus UML Light, which provides a reduces user interface an ease of use is easiest to get and adopt.&lt;/p&gt;



&lt;p&gt;So, what do you think of our typical users for Papyrus UML Light?&lt;/p&gt;</description>
	<pubDate>Wed, 16 Jan 2019 20:45:46 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Papyrus UML Light update</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=1133</guid>
	<link>https://papyrusuml.wordpress.com/2019/01/14/papyrus-uml-light-update/</link>
	<description>&lt;p&gt;First, I would like to which a happy new year that will keep you all in good health (and modeling with Moi!)!&lt;/p&gt;
&lt;p&gt;In a previous posting, I mentioned a new variant of Papyrus (me), Well, Papyrus UML Light has progressed progressing  well since then!&lt;/p&gt;
&lt;p&gt;This is what happened thus far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Requirements have been defined, including the subset of UML that is being implemented (which involved many people … and voting…)&lt;/li&gt;
&lt;li&gt;Personae have been defined for our three principal users (Nicole, Steve, and Brisha and their current names).&lt;/li&gt;
&lt;li&gt;There is a logo:  &lt;a href=&quot;https://papyrusuml.files.wordpress.com/2019/01/umllight64.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-full wp-image-1135&quot; src=&quot;https://papyrusuml.files.wordpress.com/2019/01/umllight64.png?w=604&quot; /&gt; &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;There have been three internal development releases thus far.&lt;/li&gt;
&lt;li&gt;The “Getting Started” tutorial is progressing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As usual, I’ll try to keep you up-to-date!&lt;/p&gt;</description>
	<pubDate>Mon, 14 Jan 2019 08:15:58 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Tradista Joins Eclipse Foundation</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/jp4ffjHeg8Q/Tradista-Joins-Eclipse-Foundation.html</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/jp4ffjHeg8Q/Tradista-Joins-Eclipse-Foundation.html</link>
	<description>Tradista will contribute to the Jakarta EE project, bringing its long experience in the Java EE platform applied to the financial sector.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/jp4ffjHeg8Q&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 10 Jan 2019 13:35:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: EC by Example: CountBy</title>
	<guid isPermaLink="false">https://medium.com/p/a2d6411e95e1</guid>
	<link>https://medium.com/oracledevs/ec-by-example-countby-a2d6411e95e1?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Learn how to use the countBy method in &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/720/1*OQCbBTIEwqJ4sDx7qxTaEw.png&quot; /&gt;Count the fruit by color&lt;/figure&gt;&lt;h3&gt;CountBy&lt;/h3&gt;&lt;p&gt;The method &lt;em&gt;countBy&lt;/em&gt; returns a &lt;a href=&quot;https://medium.com/oracledevs/bag-the-counter-2689e901aadb&quot;&gt;Bag&lt;/a&gt; in Eclipse Collections. A &lt;em&gt;Bag&lt;/em&gt; is an unordered &lt;em&gt;Collection&lt;/em&gt; which allows duplicates. The internal structure of the &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/impl/bag/mutable/HashBag.html&quot;&gt;HashBag&lt;/a&gt; implementation in Eclipse Collections is an &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/impl/map/mutable/primitive/ObjectIntHashMap.html&quot;&gt;ObjectIntHashMap&lt;/a&gt;. The keys of the internal map are the items, and the values are the counts stored as ints. The method &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html#countBy-org.eclipse.collections.api.block.function.Function-&quot;&gt;countBy&lt;/a&gt; takes a &lt;em&gt;Function&lt;/em&gt; as an argument.&lt;/p&gt;&lt;p&gt;The following code will illustrate how to count a collection of &lt;em&gt;Fruit&lt;/em&gt; by their color, using a method reference. We store the result in a variable named &lt;strong&gt;COUNTS_BY_COLOR.&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/978/1*Tv5aOiPA8rpoMQiPgxFRBg.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;We have two methods that query the &lt;em&gt;ImmutableBag&lt;/em&gt; that is created. They are used in the following tests.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*G6naoOt237F4PZ62TEJcjg.png&quot; /&gt;RED is the top fruit color&lt;/figure&gt;&lt;p&gt;Here’s the code in plain text if you would like experiment on your own.&lt;/p&gt;&lt;pre&gt;public enum Fruit&lt;br /&gt;{&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;APPLE&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;BANANA&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;YELLOW&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;CHERRY&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;PEAR&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;GREEN&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;STRAWBERRY&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;LEMON&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;YELLOW&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;KIWI&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;GREEN&lt;/em&gt;&lt;/strong&gt;);&lt;/pre&gt;&lt;pre&gt;    private final Color color;&lt;/pre&gt;&lt;pre&gt;    private static final ImmutableBag&amp;lt;Color&amp;gt; &lt;br /&gt;            &lt;strong&gt;&lt;em&gt;COUNTS_BY_COLOR &lt;/em&gt;&lt;/strong&gt;=&lt;br /&gt;                Bags.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(Fruit.&lt;em&gt;values&lt;/em&gt;())&lt;br /&gt;                        .countBy(Fruit::getColor);&lt;/pre&gt;&lt;pre&gt;    Fruit(Color color)&lt;br /&gt;    {&lt;br /&gt;        this.color = color;&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    public Color getColor()&lt;br /&gt;    {&lt;br /&gt;        return this.color;&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    public static int getColorCount(Color color)&lt;br /&gt;    {&lt;br /&gt;        return &lt;strong&gt;&lt;em&gt;COUNTS_BY_COLOR&lt;/em&gt;&lt;/strong&gt;.occurrencesOf(color);&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    public static boolean isTopColor(Color color)&lt;br /&gt;    {&lt;br /&gt;        return &lt;strong&gt;&lt;em&gt;COUNTS_BY_COLOR&lt;/em&gt;&lt;/strong&gt;.topOccurrences(1)&lt;br /&gt;                .anySatisfy(each -&amp;gt; each.getOne() == &lt;em&gt;color&lt;/em&gt;);&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    public enum Color&lt;br /&gt;    {&lt;br /&gt;        &lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;YELLOW&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;GREEN&lt;br /&gt;    &lt;/em&gt;&lt;/strong&gt;}&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;And the code for the test.&lt;/p&gt;&lt;pre&gt;public class FruitTest&lt;br /&gt;{&lt;br /&gt;    @Test&lt;br /&gt;    public void redFruit()&lt;br /&gt;    {&lt;br /&gt;        Assert.&lt;em&gt;assertEquals&lt;/em&gt;(3, &lt;br /&gt;                Fruit.&lt;em&gt;getColorCount&lt;/em&gt;(Fruit.Color.&lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;        Assert.&lt;em&gt;assertTrue&lt;/em&gt;(&lt;br /&gt;                Fruit.&lt;em&gt;isTopColor&lt;/em&gt;(Fruit.Color.&lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br /&gt;    public void yellowFruit()&lt;br /&gt;    {&lt;br /&gt;        Assert.&lt;em&gt;assertEquals&lt;/em&gt;(2, &lt;br /&gt;                Fruit.&lt;em&gt;getColorCount&lt;/em&gt;(Fruit.Color.&lt;strong&gt;&lt;em&gt;YELLOW&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;        Assert.&lt;em&gt;assertFalse&lt;/em&gt;(&lt;br /&gt;                Fruit.&lt;em&gt;isTopColor&lt;/em&gt;(Fruit.Color.&lt;strong&gt;&lt;em&gt;YELLOW&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;    }&lt;/pre&gt;&lt;pre&gt;    @Test&lt;br /&gt;    public void greenFruit()&lt;br /&gt;    {&lt;br /&gt;        Assert.&lt;em&gt;assertEquals&lt;/em&gt;(2, &lt;br /&gt;                Fruit.&lt;em&gt;getColorCount&lt;/em&gt;(Fruit.Color.&lt;strong&gt;&lt;em&gt;GREEN&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;        Assert.&lt;em&gt;assertFalse&lt;/em&gt;(&lt;br /&gt;                Fruit.&lt;em&gt;isTopColor&lt;/em&gt;(Fruit.Color.&lt;strong&gt;&lt;em&gt;GREEN&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;APIs covered in the examples&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/bag/ImmutableBag.html#countBy-org.eclipse.collections.api.block.function.Function-&quot;&gt;countBy&lt;/a&gt; — Counts the elements &lt;em&gt;Collection&lt;/em&gt; by the &lt;em&gt;Function&lt;/em&gt; specified and returns a &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/bag/Bag.html&quot;&gt;Bag&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/impl/factory/Bags.html&quot;&gt;Bags&lt;/a&gt;.immutable.with — Creates an &lt;em&gt;ImmutableBag&lt;/em&gt; with the specified vararg’d elements. There are &lt;a href=&quot;https://medium.com/@donraab/as-a-matter-of-factory-part-1-mutable-75cc2c5d72d9&quot;&gt;mutable&lt;/a&gt; and &lt;a href=&quot;https://medium.com/@donraab/as-a-matter-of-factory-part-2-immutable-8cb72ff897ee&quot;&gt;immutable&lt;/a&gt; Collection factories in Eclipse Collections.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/bag/Bag.html#occurrencesOf-java.lang.Object-&quot;&gt;occurrencesOf&lt;/a&gt; — Returns the count from a &lt;em&gt;Bag&lt;/em&gt; for a particular item.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/bag/Bag.html#topOccurrences-int-&quot;&gt;topOccurrences&lt;/a&gt; — Returns a &lt;em&gt;List&lt;/em&gt; of items and their counts in descending order by the number of occurrences.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Check out this &lt;a href=&quot;http://eclipse.github.io/eclipse-collections-kata/api-design&quot;&gt;presentation&lt;/a&gt; to learn more about the origins, design and evolution of the Eclipse Collections API.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=a2d6411e95e1&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/oracledevs/ec-by-example-countby-a2d6411e95e1&quot;&gt;EC by Example: CountBy&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/oracledevs&quot;&gt;Oracle Developers&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Sun, 06 Jan 2019 20:26:06 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: EC by Example: GroupBy</title>
	<guid isPermaLink="false">https://medium.com/p/7ca219358c3b</guid>
	<link>https://medium.com/oracledevs/ec-by-example-groupby-7ca219358c3b?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Learn how to group elements of a collection using &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/720/1*rGwzDNPD57M1jv7mKPoahw.png&quot; /&gt;&lt;/figure&gt;&lt;h3&gt;Happy New Year!&lt;/h3&gt;&lt;p&gt;This is my first blog in 2019. I will keep it brief. Time for some code.&lt;/p&gt;&lt;h3&gt;Group By&lt;/h3&gt;&lt;p&gt;The method &lt;em&gt;groupBy&lt;/em&gt; returns a &lt;a href=&quot;https://medium.com/oracledevs/multimap-how-it-works-a3430f549d35&quot;&gt;&lt;strong&gt;Multimap&lt;/strong&gt;&lt;/a&gt; in &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;. A &lt;em&gt;Multimap&lt;/em&gt; looks like a &lt;em&gt;Map&lt;/em&gt; in that it has methods like &lt;em&gt;get&lt;/em&gt; and &lt;em&gt;put&lt;/em&gt;, but the values in a &lt;em&gt;Multimap&lt;/em&gt; are always some &lt;em&gt;Collection&lt;/em&gt; type, like a &lt;em&gt;List&lt;/em&gt;, &lt;em&gt;Set&lt;/em&gt; or a &lt;em&gt;Bag&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;The following code will illustrate how to group a collection of &lt;em&gt;Fruit&lt;/em&gt; by their color. We store the result of the grouping in a variable named &lt;strong&gt;FRUIT_BY_COLOR&lt;/strong&gt;. Notice that the type is a specific kind of &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/multimap/Multimap.html&quot;&gt;&lt;em&gt;Multimap&lt;/em&gt;&lt;/a&gt;, because we called &lt;em&gt;groupBy&lt;/em&gt; on an &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/bag/ImmutableBag.html&quot;&gt;&lt;em&gt;ImmutableBag&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*087ocn6wigM6pzcllXfQRA.png&quot; /&gt;Fruit as an Enum with Color as an inner Enum&lt;/figure&gt;&lt;p&gt;The we can query the &lt;strong&gt;FRUIT_BY_COLOR&lt;/strong&gt; &lt;em&gt;Multimap&lt;/em&gt; for each color using the &lt;em&gt;getFruitByColor&lt;/em&gt; method on the &lt;em&gt;Fruit&lt;/em&gt; enum.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/838/1*pCZeETgNnbABR8pkf9rdmw.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Here’s the code in plain text if you would like experiment on your own.&lt;/p&gt;&lt;pre&gt;public enum Fruit&lt;br /&gt;{&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;APPLE&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;BANANA&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;YELLOW&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;CHERRY&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;PEAR&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;GREEN&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;STRAWBERRY&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;LEMON&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;YELLOW&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;    &lt;strong&gt;&lt;em&gt;KIWI&lt;/em&gt;&lt;/strong&gt;(Color.&lt;strong&gt;&lt;em&gt;GREEN&lt;/em&gt;&lt;/strong&gt;);&lt;br /&gt;&lt;br /&gt;    private final Color color;&lt;br /&gt;&lt;br /&gt;    private static final ImmutableBagMultimap&amp;lt;Color, Fruit&amp;gt; &lt;br /&gt;            &lt;strong&gt;&lt;em&gt;FRUIT_BY_COLOR &lt;/em&gt;&lt;/strong&gt;=&lt;br /&gt;                Bags.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(Fruit.&lt;em&gt;values&lt;/em&gt;())&lt;br /&gt;                        .groupBy(Fruit::getColor);&lt;br /&gt;&lt;br /&gt;    Fruit(Color color)&lt;br /&gt;    {&lt;br /&gt;        this.color = color;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public Color getColor()&lt;br /&gt;    {&lt;br /&gt;        return this.color;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public static ImmutableBag&amp;lt;Fruit&amp;gt; getFruitByColor(Color color)&lt;br /&gt;    {&lt;br /&gt;        return &lt;strong&gt;&lt;em&gt;FRUIT_BY_COLOR&lt;/em&gt;&lt;/strong&gt;.get(color);&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    public enum Color&lt;br /&gt;    {&lt;br /&gt;        &lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;YELLOW&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;GREEN&lt;br /&gt;    &lt;/em&gt;&lt;/strong&gt;}&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;And the code for the test.&lt;/p&gt;&lt;pre&gt;public class FruitTest&lt;br /&gt;{&lt;br /&gt;    @Test&lt;br /&gt;    public void redFruit()&lt;br /&gt;    {&lt;br /&gt;        Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;                Bags.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;br /&gt;                        Fruit.&lt;strong&gt;&lt;em&gt;APPLE&lt;/em&gt;&lt;/strong&gt;,&lt;br /&gt;                        Fruit.&lt;strong&gt;&lt;em&gt;CHERRY&lt;/em&gt;&lt;/strong&gt;,&lt;br /&gt;                        Fruit.&lt;strong&gt;&lt;em&gt;STRAWBERRY&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;                Fruit.&lt;em&gt;getFruitByColor&lt;/em&gt;(Fruit.Color.&lt;strong&gt;&lt;em&gt;RED&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Test&lt;br /&gt;    public void yellowFruit()&lt;br /&gt;    {&lt;br /&gt;        Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;                Bags.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;br /&gt;                        Fruit.&lt;strong&gt;&lt;em&gt;BANANA&lt;/em&gt;&lt;/strong&gt;,&lt;br /&gt;                        Fruit.&lt;strong&gt;&lt;em&gt;LEMON&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;                Fruit.&lt;em&gt;getFruitByColor&lt;/em&gt;(Fruit.Color.&lt;strong&gt;&lt;em&gt;YELLOW&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    @Test&lt;br /&gt;    public void greenFruit()&lt;br /&gt;    {&lt;br /&gt;        Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;                Bags.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;br /&gt;                        Fruit.&lt;strong&gt;&lt;em&gt;PEAR&lt;/em&gt;&lt;/strong&gt;,&lt;br /&gt;                        Fruit.&lt;strong&gt;&lt;em&gt;KIWI&lt;/em&gt;&lt;/strong&gt;),&lt;br /&gt;                Fruit.&lt;em&gt;getFruitByColor&lt;/em&gt;(Fruit.Color.&lt;strong&gt;&lt;em&gt;GREEN&lt;/em&gt;&lt;/strong&gt;));&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;APIs covered in the examples&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/bag/ImmutableBag.html#groupBy-org.eclipse.collections.api.block.function.Function-&quot;&gt;groupBy&lt;/a&gt; — Groups a &lt;em&gt;Collection&lt;/em&gt; into a &lt;em&gt;Multimap&lt;/em&gt; using the specified function to calculate a key for each object. The type of &lt;em&gt;Collection&lt;/em&gt; determines the type of &lt;em&gt;Multimap&lt;/em&gt; that is returns.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/impl/factory/Bags.html&quot;&gt;Bags&lt;/a&gt;.immutable.with — Creates an &lt;em&gt;ImmutableBag&lt;/em&gt; with the specified vararg’d elements. There are &lt;a href=&quot;https://medium.com/@donraab/as-a-matter-of-factory-part-1-mutable-75cc2c5d72d9&quot;&gt;mutable&lt;/a&gt; and &lt;a href=&quot;https://medium.com/@donraab/as-a-matter-of-factory-part-2-immutable-8cb72ff897ee&quot;&gt;immutable&lt;/a&gt; Collection factories in Eclipse Collections.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/multimap/bag/ImmutableBagMultimap.html#get-K-&quot;&gt;get&lt;/a&gt; — Returns a Collection from a &lt;em&gt;Multimap&lt;/em&gt;. In the case of an &lt;em&gt;ImmutableBagMultimap&lt;/em&gt; returns an &lt;em&gt;ImmutableBag&lt;/em&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Check out this &lt;a href=&quot;http://eclipse.github.io/eclipse-collections-kata/api-design&quot;&gt;presentation&lt;/a&gt; to learn more about the origins, design and evolution of the Eclipse Collections API.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=7ca219358c3b&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/oracledevs/ec-by-example-groupby-7ca219358c3b&quot;&gt;EC by Example: GroupBy&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/oracledevs&quot;&gt;Oracle Developers&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Wed, 02 Jan 2019 00:46:32 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: JSON Forms goes Mobile with Ionic</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=40804</guid>
	<link>https://eclipsesource.com/blogs/2018/12/21/json-forms-goes-mobile-with-ionic/</link>
	<description>&lt;p&gt;The last couple of weeks we’ve been busy with completing an Ionic 3 based renderer set to JSON Forms. If you don’t...&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://eclipsesource.com/blogs/2018/12/21/json-forms-goes-mobile-with-ionic/&quot; rel=&quot;nofollow&quot;&gt;JSON Forms goes Mobile with Ionic&lt;/a&gt; appeared first on &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt;EclipseSource&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Fri, 21 Dec 2018 13:09:15 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Eclipse TLP Contributors by Quarter</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5477</guid>
	<link>https://waynebeaton.wordpress.com/2018/12/20/eclipse-tlp-contributors-by-quarter/</link>
	<description>&lt;p&gt;Alexander posted an interesting tweet the other day.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;92 different contributors to Eclipse in the last 3 months aka 4.10 . This is probably(not checked) a record high !!! &lt;a href=&quot;https://t.co/AP6bHj5G3g&quot;&gt;https://t.co/AP6bHj5G3g&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Alexander Kurtakov (@akurtakov) &lt;a href=&quot;https://twitter.com/akurtakov/status/1074604537053212672?ref_src=twsrc%5Etfw&quot;&gt;December 17, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I decided to take a harder look at the data to see if he’s right. It turns out that he’s not. According to my data, the &lt;a href=&quot;https://projects.eclipse.org/projects/eclipse&quot;&gt;Eclipse Top Level Project&lt;/a&gt; (TLP) had the largest number of contributors, &lt;strong&gt;120&lt;/strong&gt;, in 2014Q1.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;eclipse_contributors_quarterly&quot; class=&quot;alignnone size-full wp-image-5478&quot; src=&quot;https://waynebeaton.files.wordpress.com/2018/12/eclipse_contributors_quarterly.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Still, &lt;strong&gt;70&lt;/strong&gt; in 2018Q4 is pretty good. And the quarter isn’t even over yet. Those spikes in the chart notwithstanding, the healthy upward contribution trend is encouraging.&lt;/p&gt;
&lt;p&gt;Note that my numbers are a little different than Alexander’s. His are based on the last three months worth of contributions as of the day that he parsed the chart data. My data is based strictly on traditional quarter boundaries (so his number includes some commits made in September that mine disregards).&lt;/p&gt;
&lt;p&gt;Normally, I restrict the date range on these sorts of queries, but I decided to run against the full history. You’ll notice that it looks like we had no committers before 2005: we didn’t keep committer records in our database before the Eclipse Foundation was created in 2005.&lt;/p&gt;
&lt;p&gt;These numbers represent only commits pushed to Git repositories owned by Projects that fall under the &lt;a href=&quot;https://projects.eclipse.org/projects/eclipse&quot;&gt;Eclipse Top Level Project&lt;/a&gt;, which only a fraction of the activity that occurs Eclipse Foundation open source projects.&lt;/p&gt;</description>
	<pubDate>Thu, 20 Dec 2018 21:22:01 +0000</pubDate>
</item>
<item>
	<title>Webtools News: WTP 3.12 Released!</title>
	<guid isPermaLink="false">http://www.eclipse.org/webtools/news.php#permalink186</guid>
	<link>http://eclipse.org/webtools/releases/3.12</link>
	<description>&lt;div&gt;
      The Eclipse Web Tools Platform 3.12 has been released!  &lt;a href=&quot;https://wiki.eclipse.org/WTP_FAQ#How_do_I_install_WTP.3F&quot;&gt;Installation&lt;/a&gt; and update can be performed using the
      &lt;a href=&quot;http://download.eclipse.org/releases/2018-12/&quot;&gt;SimRel 2018-12 Update Site&lt;/a&gt; or through the &lt;a href=&quot;https://marketplace.eclipse.org/user/nitind/listings&quot;&gt;Eclipse Marketplace&lt;/a&gt;.
      Release 3.12 is included in the 2018-12
          &lt;a href=&quot;https://www.eclipse.org/downloads/packages/release/2018-12/r/eclipse-ide-enterprise-java-developers&quot;&gt;Eclipse IDE for Enterprise Java Developers&lt;/a&gt; and &lt;a href=&quot;https://www.eclipse.org/downloads/packages/release/2018-12/r/eclipse-ide-javascript-and-web-developers&quot;&gt;Eclipse IDE for JavaScript and Web Developers&lt;/a&gt;, with selected portions also included in &lt;a href=&quot;http://www.eclipse.org/downloads/compare.php&quot;&gt;other packages&lt;/a&gt;.  Adopters can download &lt;a href=&quot;http://download.eclipse.org/webtools/downloads/&quot;&gt;the R3.12 built update site itself&lt;/a&gt; directly.&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;http://www.eclipse.org/webtools/news.php#permalink186&quot;&gt;More news&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 20 Dec 2018 21:01:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EclipseSource Oomph Profile – updated to 2018-12</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=40835</guid>
	<link>https://eclipsesource.com/blogs/2018/12/20/eclipsesource-oomph-profile-updated-to-2018-12/</link>
	<description>&lt;p&gt;Yesterday, Eclipse 2018-12 has been released, a new version of the Eclipse IDE and platform. It contains many useful improvements, so...&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://eclipsesource.com/blogs/2018/12/20/eclipsesource-oomph-profile-updated-to-2018-12/&quot; rel=&quot;nofollow&quot;&gt;EclipseSource Oomph Profile – updated to 2018-12&lt;/a&gt; appeared first on &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt;EclipseSource&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Thu, 20 Dec 2018 15:04:12 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Development Process 2018</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/fDjlvEVMwfo/eclipse-development-process-2018</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/fDjlvEVMwfo/eclipse-development-process-2018</link>
	<description>In December 7/2018, the Eclipse Foundation's Board of Directors approved a new edition of the Eclipse Development Process (EDP) which introduces one particularly significant change, along with a small number of other useful changes.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/fDjlvEVMwfo&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 19 Dec 2018 14:35:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation Drives $9 Billion in Open Source Innovation</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/V24pkjx8Ki4/Eclipse-Foundation-Drives-9-Billion-in-Open-Source-Innovation.html</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/V24pkjx8Ki4/Eclipse-Foundation-Drives-9-Billion-in-Open-Source-Innovation.html</link>
	<description>Global open source foundation finishes 2018 with 360+ open source projects, 162+ million lines of code written and more than 275 sponsor members&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/V24pkjx8Ki4&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 19 Dec 2018 14:35:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EMF Forms and EMF Client Platform 1.19.0 released!</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=40783</guid>
	<link>https://eclipsesource.com/blogs/2018/12/19/emf-forms-and-emf-client-platform-1-19-0-released/</link>
	<description>&lt;p&gt;We are happy to announce that with the Eclipse Release 2018-12, we have also shipped  EMF Forms and EMF Client Platform...&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://eclipsesource.com/blogs/2018/12/19/emf-forms-and-emf-client-platform-1-19-0-released/&quot; rel=&quot;nofollow&quot;&gt;EMF Forms and EMF Client Platform 1.19.0 released!&lt;/a&gt; appeared first on &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt;EclipseSource&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Wed, 19 Dec 2018 14:08:31 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Eclipse Development Process 2018</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5475</guid>
	<link>https://waynebeaton.wordpress.com/2018/12/19/eclipse-development-process-2018/</link>
	<description>&lt;p&gt;On December 7/2018, the Eclipse Foundation’s Board of Directors approved a new edition of the &lt;a href=&quot;https://www.eclipse.org/projects/dev_process&quot;&gt;Eclipse Development Process&lt;/a&gt; (EDP) which introduces one particularly significant change, along with a small number of other useful changes. We rolled this new edition out on December 14/2018.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Note that project teams who are familiar with the previous edition of the EDP can just keep doing what they’ve always done: all changes in this new edition are backwards compatible.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The big change is the introduction of &lt;em&gt;&lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#6_3_5_Progress_Review&quot;&gt;Progress Reviews&lt;/a&gt;&lt;/em&gt; and the recast of &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#6_3_3_Release_Review&quot;&gt;Release Reviews&lt;/a&gt; as a type of Progress Review. Progress Reviews are basically the same as Release Reviews with the exception that they can occur at any point in the project lifecycle (while the EDP doesn’t explicitly make any specific requirements, Release Reviews are generally accepted to be timed near the end of a release cycle). The basic idea is that a project team can opt to time a Progress Review at their convenience.&lt;/p&gt;
&lt;p&gt;Progress Reviews are not in and of themselves interesting. What is interesting is that a project team can declare as many official releases as they’d like for an entire year following a successful Progress Review or Release Review. This should be especially interesting and valuable to projects that need to make very frequent releases.&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_5473&quot; style=&quot;width: 653px;&quot;&gt;&lt;img alt=&quot;lifecycle&quot; class=&quot; size-full wp-image-5473 aligncenter&quot; src=&quot;https://waynebeaton.files.wordpress.com/2018/12/lifecycle-1.png?w=640&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;The new release process looks a little something like this.&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;This change in the nature of how we do releases, required that the statement that “the IP Policy has been followed and all approvals have been received” be moved from being a requirement of a Release Review to being a requirement of a release. That is, the change in the nature of releases does not change the requirement the the &lt;a href=&quot;https://www.eclipse.org/org/documents/Eclipse_IP_Policy.pdf&quot;&gt;Eclipse IP Policy&lt;/a&gt; be followed and that projects engage in the full &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip&quot;&gt;Eclipse IP Due Diligence Process&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Intellectual property must be properly accounted for and tracked at all times.&lt;/strong&gt; The project team must engage in the Eclipse IP Due Diligence Process on an ongoing basis. The IP Log review and approval that occurs at the time of either a Release Review or Progress Review should be regarded as a means of confirming that intellectual property is being properly managed and not as a trigger to engage in a last minute clean up.&lt;/p&gt;
&lt;p&gt;Only intellectual property that has been been approved (or &lt;a href=&quot;https://waynebeaton.wordpress.com/2017/01/12/license-certification-due-diligence/&quot;&gt;license certified&lt;/a&gt;) by the Eclipse IP Team may be included in a release.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In addition to the IP Policy, project teams are expected to continue to engage in the usual sorts of community building activities like open and transparent release planning.&lt;/p&gt;
&lt;p&gt;The new edition also includes the following changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A long-missing &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#edp-terms&quot;&gt;Terms and Definitions&lt;/a&gt; section has been added;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#6_4_Releases&quot;&gt;Releases section&lt;/a&gt; has been restructured and is (hopefully) more easily parsed;&lt;/li&gt;
&lt;li&gt;The content is captured in Asciidoc and rendered using Asciidoctor; and&lt;/li&gt;
&lt;li&gt;All anchors in the document are self-referential links (which make it easier to get links into the document).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A more comprehensive list of the changes is captured in the &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#changelog&quot;&gt;change log&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ll push out updates to the &lt;a href=&quot;https://www.eclipse.org/projects/handbook/&quot;&gt;Eclipse Project Handbook&lt;/a&gt; that support these changes later this week.&lt;/p&gt;</description>
	<pubDate>Wed, 19 Dec 2018 13:12:23 +0000</pubDate>
</item>
<item>
	<title>Christian Pontesegger: Jenkins 7: Pipeline Support</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-7472654809600166607</guid>
	<link>http://codeandme.blogspot.com/2018/12/jenkins-7-pipeline-support.html</link>
	<description>Next step in our Jenkins tutorials is to add support for &lt;a href=&quot;https://jenkins.io/doc/book/pipeline/getting-started/&quot; target=&quot;_blank&quot;&gt;pipeline builds&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Jenkins Tutorials&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;For a list of all jenkins related tutorials see &lt;a href=&quot;https://codeandme.blogspot.com/p/jenkins-articles.html&quot; target=&quot;_blank&quot;&gt;Jenkins Tutorials Overview.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_07_pipeline.zip?raw=true&quot; target=&quot;_blank&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_07_pipeline.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/jenkins/07_pipeline&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 1: Adjusting the code&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Good news first: our code (including jelly) from the &lt;a href=&quot;https://codeandme.blogspot.com/2018/12/jenkins-6-advanced-configuration-area.html&quot; target=&quot;_blank&quot;&gt;previous tutorial&lt;/a&gt; is ready to be used in pipeline without change. There are some &lt;a href=&quot;https://jenkins.io/doc/developer/plugin-development/pipeline-integration/&quot; target=&quot;_blank&quot;&gt;considerations to be taken&lt;/a&gt; when writing pipeline plugins, but we already took care of this.&lt;br /&gt;&lt;br /&gt;In pipeline each build step needs a name to be addressed. By default this would be the class name and a call would look like this:&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;step([$class: 'HelloBuilder', buildMessage: 'Hello from pipeline'])&lt;/pre&gt;&lt;br /&gt;When using the &lt;i&gt;@Symbol&lt;/i&gt; annotation on the &lt;i&gt;Descriptor&lt;/i&gt; we can provide a nicer name for our build step.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 2: Adding dependencies to the execution environment&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Our current test target does not support pipeline jobs as we did not add the right dependencies to the pom file so far. We will first see how to add dependencies in general, in the next step we will fix the build afterwards.&lt;br /&gt;&lt;br /&gt;To add support for pipeline, add following definition to your &lt;i&gt;pom.xml&lt;/i&gt;:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt; &amp;lt;dependencies&amp;gt;&lt;br /&gt;  &amp;lt;dependency&amp;gt;&lt;br /&gt;   &amp;lt;groupId&amp;gt;org.jenkins-ci.plugins.workflow&amp;lt;/groupId&amp;gt;&lt;br /&gt;   &amp;lt;artifactId&amp;gt;workflow-aggregator&amp;lt;/artifactId&amp;gt;&lt;br /&gt;   &amp;lt;version&amp;gt;2.6&amp;lt;/version&amp;gt;&lt;br /&gt;   &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br /&gt;  &amp;lt;/dependency&amp;gt;&lt;br /&gt; &amp;lt;/dependencies&amp;gt;&lt;/pre&gt;&lt;br /&gt;We always need &lt;i&gt;groupId&lt;/i&gt;, &lt;i&gt;artifactId&lt;/i&gt; and a &lt;i&gt;version&lt;/i&gt;. To get these parameters you would typically &lt;a href=&quot;https://plugins.jenkins.io/workflow-aggregator&quot; target=&quot;_blank&quot;&gt;look up a plugin on the Jenkins plugin site&lt;/a&gt;. Locate the link to the &lt;a href=&quot;https://github.com/jenkinsci/workflow-aggregator-plugin&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt; (Github) and open the &lt;a href=&quot;https://github.com/jenkinsci/workflow-aggregator-plugin/blob/master/pom.xml&quot; target=&quot;_blank&quot;&gt;pom.xml&lt;/a&gt; of the corresponding plugin. There you will find definitions for &lt;i&gt;groupId&lt;/i&gt; and &lt;i&gt;artifactId&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;Available versions can be found on the &lt;a href=&quot;https://repo.jenkins-ci.org/&quot; target=&quot;_blank&quot;&gt;Jenkins Artifactory server&lt;/a&gt; (we added this server to our pom already). There navigate to the &lt;i&gt;public&lt;/i&gt; folder, then follow the structure down, first opening folder from the &lt;i&gt;groupId&lt;/i&gt; followed by the &lt;i&gt;artifactId&lt;/i&gt;. For the pipeline dependency we would open &lt;i&gt;public/org/jenkins-ci/plugins/workflow/workflow-aggregator&lt;/i&gt;. &lt;a href=&quot;https://repo.jenkins-ci.org/list/public/org/jenkins-ci/plugins/workflow/workflow-aggregator/2.6/&quot; target=&quot;_blank&quot;&gt;Latest version at the time of writing&lt;/a&gt; is 2.6.&lt;br /&gt;&lt;br /&gt;Setting the &lt;i&gt;scope&lt;/i&gt; to &lt;i&gt;test&lt;/i&gt; means that we do not have a build dependency on the plugin. Instead we need it only deployed and enabled on our test instance.&lt;br /&gt;&lt;br /&gt;When adding build dependencies you should run&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;mvn -DdownloadSources=true -DdownloadJavadocs=true -DoutputDirectory=target/eclipse-classes eclipse:eclipse&lt;/pre&gt;like we did in the first tutorial. It will update the &lt;i&gt;.classpath&lt;/i&gt; file in your eclipse project, automatically adding required libraries to the build path. Take care that also the &lt;i&gt;.project&lt;/i&gt; file gets rewritten!&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 3: Dependency Resolution&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;We added our dependency, so everything should be done, right?&lt;br /&gt;Wrong! The &lt;i&gt;maven-enforcer-plugin&lt;/i&gt; &lt;a href=&quot;https://maven.apache.org/enforcer/enforcer-rules/requireUpperBoundDeps.html&quot; target=&quot;_blank&quot;&gt;verifies plugin dependencies&lt;/a&gt; for us and will detect some incompatibilities, eg:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;Require upper bound dependencies error for org.jenkins-ci.plugins:script-security:1.39 paths to dependency are:&lt;br /&gt;+-com.codeandme:builder.hello:1.0-SNAPSHOT&lt;br /&gt;  +-org.jenkins-ci.plugins.workflow:workflow-aggregator:2.6&lt;br /&gt;    +-org.jenkins-ci.plugins.workflow:workflow-support:2.20&lt;br /&gt;      +-org.jenkins-ci.plugins:script-security:1.39&lt;br /&gt;and&lt;br /&gt;+-com.codeandme:builder.hello:1.0-SNAPSHOT&lt;br /&gt;  +-org.jenkins-ci.plugins.workflow:workflow-aggregator:2.6&lt;br /&gt;    +-org.jenkins-ci.plugins.workflow:workflow-durable-task-step:2.22&lt;br /&gt;      +-org.jenkins-ci.plugins:script-security:1.39&lt;br /&gt;and&lt;br /&gt;+-com.codeandme:builder.hello:1.0-SNAPSHOT&lt;br /&gt;  +-org.jenkins-ci.plugins.workflow:workflow-aggregator:2.6&lt;br /&gt;    +-org.6wind.jenkins:lockable-resources:2.3&lt;br /&gt;      +-org.jenkins-ci.plugins:script-security:1.26&lt;br /&gt;...&lt;/pre&gt;This is one of multiple dependency conflicts detected. It seems that maven at first resolves the dependency with the lowest version number. As some plugins need a newer version, we need to resolve the dependency by our own.&lt;br /&gt;&lt;br /&gt;The simplest way I found is to check for the highest version of the required plugin (in the upper case: script-security) and add it to our dependencies sections in the &lt;i&gt;pom.xml&lt;/i&gt; file. I was hoping for some maven help on this process, but failed. So I ended up adding required dependencies manually until the build was satisfied.&lt;br /&gt;&lt;br /&gt;You might run into other build problems, eg after adding a &lt;i&gt;test&lt;/i&gt; dependency to the &lt;i&gt;symbol-annotation&lt;/i&gt; plugin, my build started to fail, not being able to resolve &lt;i&gt;Symbol.class&lt;/i&gt; anymore. Reason is that &lt;i&gt;symbol-annotation&lt;/i&gt; is actually a &lt;i&gt;build&lt;/i&gt; dependency rather than a &lt;i&gt;test&lt;/i&gt; dependency. By binding it to the &lt;i&gt;test&lt;/i&gt; scope only we broke the build.&lt;br /&gt;&lt;br /&gt;Once you sorted out all dependencies (&lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/jenkins/07_pipeline/builder.hello/pom.xml&quot; target=&quot;_blank&quot;&gt;see resulting pom.xml&lt;/a&gt;) your test instance will be able to run pipeline jobs.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 4: Testing the Build Step in Pipeline&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;On your test instance create a new &lt;i&gt;Pipeline&lt;/i&gt; and add following &lt;i&gt;script&lt;/i&gt;:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;node {&lt;br /&gt;    stage('Greetings') {&lt;br /&gt;        greet buildDelay: 'long', buildMessage: 'Hello pipeline build'&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;Coding the command line for our build step can either be done manually or by using the &lt;i&gt;Pipeline Syntax&lt;/i&gt; helper. The link is available right below the &lt;i&gt;Script&lt;/i&gt; section in your job configuration. Jenkins makes use of our previous jelly definitions to display a visual helper for the &lt;i&gt;Hello Build&lt;/i&gt; step. We may set all optional parameters on the UI and let Jenkins create the command line to be used in the pipeline script.&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-NknsyjGDLnM/XBjRQiZXAkI/AAAAAAAABFg/fkARlPXG-dw3sKPdzuLPU7f2uCj0dJVsQCLcBGAs/s1600/jenkins.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;456&quot; src=&quot;https://4.bp.blogspot.com/-NknsyjGDLnM/XBjRQiZXAkI/AAAAAAAABFg/fkARlPXG-dw3sKPdzuLPU7f2uCj0dJVsQCLcBGAs/s640/jenkins.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;</description>
	<pubDate>Tue, 18 Dec 2018 11:28:24 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>

</channel>
</rss>
